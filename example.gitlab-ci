image: elixir:1.18.3-alpine

stages:
  - deps
  - build
  - test

services:
  - postgres:latest

variables:
  MIX_ENV: test
  FF_NETWORK_PER_BUILD: 1
  POSTGRES_PASSWORD: ci_pipeline_password
  BACKEND_POSTGRES_HOST: postgres
  POSTGRES_USER: postgres
  POSTGRES_HOST: postgres
  POSTGRES_PWD: ci_pipeline_password
  POSTGRES_DATABASE: elixir_react_framework_test
  SALT_ROUNDS: 10
  POSTGRES_URL: "postgres://postgres:ci_pipeline_password@postgres/elixir_react_framework_test"

.cache_template: &cache_template
  cache:
    key:
      files:
        - mix.lock
        - assets/package-lock.json
    paths:
      - _build/
      - deps/
      - assets/node_modules/
    policy: pull

.cache_push_template: &cache_push_template
  cache:
    key:
      files:
        - mix.lock
        - assets/package-lock.json
    paths:
      - _build/
      - deps/
      - assets/node_modules/
    policy: pull-push

deps:
  stage: deps
  rules:
    - when: always
  <<: *cache_push_template
  script:
    - mix deps.get
  before_script:
    - apk add --no-cache build-base git openssl-dev
    - apk add --no-cache nodejs npm yarn
    - touch testing.env.exs
    - mix setup.pipeline
  artifacts:
    paths:
      - _build
      - deps

build:
  stage: build
  needs:
    - deps
  rules:
    - when: on_success
  <<: *cache_template
  before_script:
    - apk add --no-cache build-base git openssl-dev
    - apk add --no-cache nodejs npm yarn
    - touch testing.env.exs
    - mix setup.pipeline
  script:
    - mix compile

elixir-tests:
  stage: test
  needs:
    - build
  rules:
    - when: on_success
  <<: *cache_template
  before_script:
    - apk add --no-cache build-base git openssl-dev
    - apk add --no-cache nodejs npm yarn
    - touch testing.env.exs
    - mix setup.pipeline
  script:
    - mix setup
    - mix test
  artifacts:
    when: always
    reports:
      junit: report.xml

elixir-coverage:
  stage: test
  needs:
    - build
  rules:
    - when: on_success
      allow_failure: true
  <<: *cache_template
  before_script:
    - apk add --no-cache build-base git openssl-dev
    - apk add --no-cache nodejs npm yarn
    - touch testing.env.exs
    - mix setup.pipeline
  script:
    - mix ecto.create --quiet
    - mix ecto.migrate --quiet
    - mix coverage
  coverage: '/(\d+\.\d+)%\s+\|\s+Total/'
  artifacts:
    paths:
      - cover
    when: always

react-tests:
  stage: test
  needs:
    - build
  rules:
    - when: on_success
  <<: *cache_template
  before_script:
    - apk add --no-cache build-base git openssl-dev
    - apk add --no-cache nodejs npm yarn
    - touch testing.env.exs
    - mix setup.pipeline
  script:
    - mix setup
    - mix assets.install
    - mix assets.test
  artifacts:
    when: always
    reports:
      junit: report.xml

react-coverage:
  stage: test
  needs:
    - build
 rules:
    - when: on_success
      allow_failure: true
  <<: *cache_template
  before_script:
    - apk add --no-cache build-base git openssl-dev
    - apk add --no-cache nodejs npm yarn
    - touch testing.env.exs
    - mix setup.pipeline
  script:
    - mix setup
    - mix assets.install
    - mix assets.coverage
  coverage: '/(\d+\.\d+)%\s+\|\s+Total/'
  artifacts:
    paths:
      - cover
    when: always